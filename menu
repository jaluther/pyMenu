#!/usr/bin/python
# Written by: James Luther
# https://github.com/jaluther/pyMenu

import os,time
import yaml,json

DEBUG = False
DEVICES_FILE = 'devices.yml'

def loadDevices(option):
  if option == 'file':
    with open(DEVICES_FILE, 'r') as stream:
      full_device_dict = yaml.safe_load(stream)
    full_device_list = sorted(full_device_dict.keys())
    return full_device_dict,full_device_list
  if option == 'db':
    print('not implemented yet')

def getUserID(option):
  if option == 'linux':
    return os.getenv('USER')
  if option == 'prompt':
    return raw_input("Username: >> ")

def PrintMenu(menu_list, show_quit=True):
  # clear screen
  os.system('clear')
  # Print header
  print('#'*30)
  print('# SSH Menu')
  print('#'*30)
  # created numbered list (increment to start at 1)
  for i in menu_list:
    print('%s\t%s' % (menu_list.index(i)+1, i))
  # print trailer
  if show_quit:
    print('')
    print('q\tBack')

def ParseChoice(choice):
  choice_list = choice.split(' ')
  choice_num = choice_list[0]
  # prepare vars (decrement by 1 to match dict keys)
  choice_num = int(choice_num)
  choice_num -=1
  # if input below 0 skip loop (raise) - list behavour undesirable
  if choice_num < 0:
    raise Exception('number out of range')
  choice_dict = {'number': choice_num}
  if len(choice_list) > 1:
    choice_dict['id'] = choice_list[1]
  if DEBUG:
    print(choice_dict)
  return choice_dict

def BuildConn(device_list,choice_dict):
  # build out connection string i.e. username@ip/hostname
  choice = choice_dict['number']
  chosen_device = device_list[choice]
  if 'id' in choice_dict:
    uid = choice_dict['id']
  else:
    uid = defaultid
  conn = '%s@%s' % (uid, full_device_dict[chosen_device]['host'])
  return conn

def SearchMenu():
  while True:
    PrintMenu([], show_quit=False)
    # get chosen input
    choice = raw_input("Search Query >> ")
    try:
      # If 'q' exit while loop (return)
      if choice.lower() == 'q':
        return
      # Create a filtered list and call device list menu
      filtered_dev_list = []
      for k,v in full_device_dict.items():
        if choice.lower() in k.lower():
          filtered_dev_list.append(k)
      filtered_dev_list.sort()
      if filtered_dev_list == []:
        print('!!!! No matching devices found !!!!')
        pause = raw_input('Any key to continue >> ')
      else:
        DeviceListMenu(filtered_dev_list)

    except Exception as e:
      if DEBUG:
        print('Exception caught: %s' % e)
      pass
    if DEBUG:
      time.sleep(1)

def DeviceListMenu(device_list):
  while True:
    PrintMenu(device_list)
    # get chosen input
    choice = raw_input(">> ")
    try:
      # If 'q' exit while loop (return)
      if choice.lower() == 'q':
        return
      choice_dict = ParseChoice(choice)

      # SSH to chosen device
      conn = BuildConn(device_list,choice_dict)
      print("CONNECT: 'ssh %s'" % (conn))
      os.system('ssh ' + conn)
    except Exception as e:
      if DEBUG:
        print('Exception caught: %s' % e)
      pass
    if DEBUG:
      time.sleep(1)

if __name__ == "__main__":
  PrintMenu([], show_quit=False)
  defaultid = getUserID('prompt')
  full_device_dict,full_device_list = loadDevices('file')
  SearchMenu()

