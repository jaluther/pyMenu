#!/usr/bin/python
#
# Written by: James Luther
# https://github.com/jaluther/pyMenu

import os,time
import yaml,json

debug=False
defaultid=False
#defaultid='james'

# Build menu data from YAML file
with open('devices.yml', 'r') as stream:
  full_device_dict = yaml.load(stream)
full_device_list = sorted(full_device_dict.keys())

try:
  # get a list of device types
  dev_type_list = []
  for k,v in full_device_dict.items():
    dev_type_list.append(v['dev_type'])
  # remove duplicates and sort
  dev_type_list = list(set(dev_type_list))
  dev_type_list.sort()

  # get a list of environment types
  env_list = []
  for k,v in full_device_dict.items():
    env_list.append(v['env'])
  # remove duplicates and sort
  env_list = list(set(env_list))
  env_list.sort()
  if debug:
    print dev_type_list
    print env_list
except Exception, e:
  print 'devices.yml formatting error: %s key missing' % e
  quit()

def PrintMenu(menu_list):
  # clear screen
  os.system('clear')
  # Print header
  print '#'*30
  print '# SSH Menu'
  print '#'*30
  # created numbered list (increment to start at 1)
  for i in menu_list:
    print '%s\t%s' % (menu_list.index(i)+1, i)
  # print trailer
  print ''
  print 'q\tBack'

def ParseChoice(choice):
  # prepare vars (decrement by 1 to match dict keys)
  choice = int(choice)
  choice -=1
  # if input below 0 skip loop (raise) - list behavour undesirable
  if choice < 0:
    raise Exception('number out of range')
  return choice

def BuildConn(device_list,choice):
  # build out connection string i.e. username@ip/hostname
  chosen_device = device_list[choice]
  if full_device_dict[chosen_device].has_key('id'):
    id = full_device_dict[chosen_device]['id']
  elif defaultid:
    id = defaultid
  else:
    id = raw_input("Username: >> ")
    print '!!!!!! TIP: set default user id in python script !!!!!!'
  conn = '%s@%s' % (id, full_device_dict[chosen_device]['host'])
  return conn

def TopMenu():
  while True:
    top_menu_list = [
            'All devices menu',
            'Device Type menu',
            'Environment menu']
    PrintMenu(top_menu_list)
    # get chosen input
    choice = raw_input(">> ")
    try:
      # If 'q' exit while loop (return)
      if choice.lower() == 'q':
        return
      choice = ParseChoice(choice)

      # Static menu list (based on top_menu_list)
      if choice == 0:
        DeviceListMenu(full_device_list)
      if choice == 1:
        DevTypeMenu()
      if choice == 2:
        EnvMenu()

    except Exception, e:
      if debug:
        print 'Exception caught: %s' % e
      pass
    if debug:
      time.sleep(1)

def DevTypeMenu():
  while True:
    PrintMenu(dev_type_list)
    # get chosen input
    choice = raw_input(">> ")
    try:
      # If 'q' exit while loop (return)
      if choice.lower() == 'q':
        return
      choice = ParseChoice(choice)

      # Create a filtered list a call device list menu
      filtered_dev_list = []
      for k,v in full_device_dict.items():
        if v['devType'] == dev_type_list[choice]:
          filtered_dev_list.append(k)
      filtered_dev_list.sort()
      DeviceListMenu(filtered_dev_list)

    except Exception, e:
      if debug:
        print 'Exception caught: %s' % e
      pass
    if debug:
      time.sleep(1)

def EnvMenu():
  while True:
    PrintMenu(env_list)
    # get chosen input
    choice = raw_input(">> ")
    try:
      # If 'q' exit while loop (return)
      if choice.lower() == 'q':
        return
      choice = ParseChoice(choice)

      # Create a filtered list and call device list menu
      filtered_dev_list = []
      for k,v in full_device_dict.items():
        if v['env'] == env_list[choice]:
          filtered_dev_list.append(k)
      filtered_dev_list.sort()
      DeviceListMenu(filtered_dev_list)

    except Exception, e:
      if debug:
        print 'Exception caught: %s' % e
      pass
    if debug:
      time.sleep(1)

def DeviceListMenu(device_list):
  while True:
    PrintMenu(device_list)
    # get chosen input
    choice = raw_input(">> ")
    try:
      # If 'q' exit while loop (return)
      if choice.lower() == 'q':
        return
      choice = ParseChoice(choice)

      # SSH to chosen device
      conn = BuildConn(device_list,choice)
      print "CONNECT: 'ssh %s'" % (conn)
      os.system('ssh ' + conn)
    except Exception, e:
      if debug:
        print 'Exception caught: %s' % e
      pass
    if debug:
      time.sleep(1)

if __name__ == "__main__":
  TopMenu()

