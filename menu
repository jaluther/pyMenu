#!/usr/bin/env python3
# Written by: James Luther
# https://github.com/jaluther/pyMenu

import os,time,copy,getpass
import yaml,json
from sys import argv
from prettytable import PrettyTable

DEBUG = False
DEVICES_FILE = '/usr/local/etc/inventory.yaml'
OLD_SSH_MODELS = ['screenos']
#DEFAULT_ID = 'jluth_wpp'

# Load user settings
USER = getpass.getuser()
SETTINGS_FILE = '/usr/local/etc/menu_settings.yaml'
with open(SETTINGS_FILE, 'r') as stream:
  user_settings = yaml.safe_load(stream)

try:
  GTAC_ID = user_settings[USER]['GTAC_ID']
  IPSOFT_ID = user_settings[USER]['IPSOFT_ID']
  SPRINT_ID = user_settings[USER]['SPRINT_ID']
except Exception as e:
  print('YOU MUST ADD USER ID TO: /usr/local/etc/menu_settings.yaml')
  quit()

def loadDevices(option):
  if option == 'file':
    with open(DEVICES_FILE, 'r') as stream:
      full_device_dict = yaml.safe_load(stream)
    full_device_list = sorted(full_device_dict.keys())
    return full_device_dict,full_device_list
  if option == 'db':
    print('not implemented yet')

def getUserID(option):
  if option == 'linux':
    return os.getenv('USER')
  if option == 'prompt':
    return input("Username: >> ")

def PrintMenu(menu_list, show_quit=True):
  # clear screen (using "clear" may clear scrollback on some version of linux)
  os.system("printf '\33[H\33[2J'")
  # Print header
  print('#'*30)
  print('# SSH Menu')
  print('#'*30)
  # Create Exmpty table
  pt = PrettyTable()
  pt.field_names = ['index', 'hostname', 'IP', 'City', 'Building ID']
  pt.clear_rows()
  # Add Rows
  for i in menu_list:
    row = [menu_list.index(i)+1,
           i,
           full_device_dict[i]['ip'],
           full_device_dict[i]['City'],
           full_device_dict[i]['BuildingID'],
         ]
    pt.add_row(row)
  # print Table
  if len(pt._rows) > 0:
    pt.sortby = 'index'
    pt.align['hostname'] = 'l'
    pt.align['IP'] = 'l'
    pt.align['City'] = 'l'
    pt.align['Building ID'] = 'l'
    print(pt)
  # print trailer
  if show_quit:
    print('')
    print('q\tBack')

def ParseChoice(choice):
  choice_list = choice.split(' ')
  choice_num = choice_list[0]
  # prepare vars (decrement by 1 to match dict keys)
  choice_num = int(choice_num)
  choice_num -=1
  # if input below 0 skip loop (raise) - list behavour undesirable
  if choice_num < 0:
    raise Exception('number out of range')
  choice_dict = {'number': choice_num}
  if len(choice_list) > 1:
    choice_dict['id'] = choice_list[1]
  if DEBUG:
    print(choice_dict)
  return choice_dict

def BuildConnOLd(device_list,choice_dict):
  # build out connection string i.e. username@ip/hostname
  # OLD - DISABLED - based on data extract from entuity
  choice = choice_dict['number']
  chosen_device = device_list[choice]
  # determine user id
  if 'id' in choice_dict:
    uid = choice_dict['id']
  else:
    uid = defaultid
  # determine if old ciphers should be used
  protocol = 'ssh'
  if 'model' in full_device_dict[chosen_device]:
    if full_device_dict[chosen_device]['model'] in OLD_SSH_MODELS:
      protocol = 'ssh -oHostKeyAlgorithms=+ssh-dss -c 3des-cbc'
  conn = '%s %s@%s' % (protocol, uid, full_device_dict[chosen_device]['ip'])
  return conn

def BuildConn(device_list,choice_dict):
  # build out connection string i.e. username@ip/hostname
  # Based on data model extracted from Solarwinds
  choice = choice_dict['number']
  chosen_device = device_list[choice]
  # determine user id
  if 'id' in choice_dict:
    uid = choice_dict['id']
  elif 'credentials' in full_device_dict[chosen_device] and full_device_dict[chosen_device]['credentials'] != None:
    if full_device_dict[chosen_device]['credentials'] == 'GTAC':
      uid = GTAC_ID
    if full_device_dict[chosen_device]['credentials'] == 'IPSoft':
      uid = IPSOFT_ID
    if full_device_dict[chosen_device]['credentials'] == 'Sprint':
      uid = SPRINT_ID
    if full_device_dict[chosen_device]['credentials'].startswith('ipautomata'):
      uid = 'ipautomata'
  else:
    uid = GTAC_ID
  ## Determine telnet/ssh based on transport parameter
  protocol = 'ssh'
  if 'transport' in full_device_dict[chosen_device] and full_device_dict[chosen_device]['transport'] != None:
    protocol = full_device_dict[chosen_device]['transport'].lower()
    if protocol[:3] == 'ssh':
      protocol = 'ssh'
  # build connectiom string and return
  if protocol == 'telnet':
    conn = '%s %s' % (protocol, full_device_dict[chosen_device]['ip'])
  else:
    conn = '%s %s@%s' % (protocol, uid, full_device_dict[chosen_device]['ip'])
  return conn

def queryDevList(query_list,device_dict):
  # recursively filter results with multiple query terms
  qlist = copy.deepcopy(query_list)
  if len(qlist) == 0:
    filtered_dev_list = []
    for k,v in device_dict.items():
      filtered_dev_list.append(k)
    return filtered_dev_list
  else:
    filtered_dev_dict = {}
    q = qlist.pop()
    for k,v in device_dict.items():
      if q.lower() in k.lower():
        filtered_dev_dict[k] = v
      if 'vendor' in v:
        if q.lower() == v['vendor'].lower():
          filtered_dev_dict[k] = v
      if 'model' in v:
        if q.lower() == v['model'].lower():
          filtered_dev_dict[k] = v
      if 'Country' in v and v['Country'] != None:
        if q.lower() in v['Country'].lower():
          filtered_dev_dict[k] = v
      if 'City' in v and v['City'] != None:
        if q.lower() in v['City'].lower():
          filtered_dev_dict[k] = v
      if 'LocationCode' in v and v['LocationCode'] != None:
        if q.lower() == v['LocationCode'].lower():
          filtered_dev_dict[k] = v
      if 'BuildingID' in v and v['BuildingID'] != None:
        if q.lower() in v['BuildingID'].lower():
          filtered_dev_dict[k] = v
    return queryDevList(qlist,filtered_dev_dict)

def SearchMenu():
  while True:
    PrintMenu([], show_quit=False)
    # get chosen input
    query = input("Search Query >> ")
    try:
      # If 'q' exit while loop (return)
      if query.lower() == 'q':
        return

      query_list = query.split(' ')

      # Search for matches
      filtered_dev_list = queryDevList(query_list,full_device_dict)

      # remove duplicates and sort list
      filtered_dev_list = list(dict.fromkeys(filtered_dev_list))
      filtered_dev_list.sort()

      # if list isn't empty, create menu
      if filtered_dev_list == []:
        print('!!!! No matching devices found !!!!')
        pause = input('Any key to continue >> ')
      else:
        DeviceListMenu(filtered_dev_list)

    except Exception as e:
      if DEBUG:
        print('Exception caught: %s' % e)
      pass
    if DEBUG:
      time.sleep(1)

def DeviceListMenu(device_list):
  while True:
    PrintMenu(device_list)
    # get chosen input
    choice = input(">> ")
    try:
      # If 'q' exit while loop (return)
      if choice.lower() == 'q':
        return
      choice_dict = ParseChoice(choice)

      # SSH to chosen device
      conn = BuildConn(device_list,choice_dict)
      print("CONNECT: '%s'" % (conn))
      os.system(conn)
    except Exception as e:
      if DEBUG:
        print('Exception caught: %s' % e)
      pass
    if DEBUG:
      time.sleep(1)

if __name__ == "__main__":
  if len(argv) > 1:
    if argv[1] == '-s' or argv[1] == '--search-terms':
      print('All search terms driven by data in Solarwinds')
      print('\nSEARCH TERMS::')
      os.system('cat %s | grep BuildingID | sort -u' % DEVICES_FILE)
      os.system('cat %s | grep LocationCode | sort -u' % DEVICES_FILE)
      os.system('cat %s | grep Country | sort -u' % DEVICES_FILE)
      os.system('cat %s | grep City | sort -u' % DEVICES_FILE)
      os.system('cat %s | grep vendor | sort -u' % DEVICES_FILE)
      os.system('cat %s | grep model | sort -u' % DEVICES_FILE)
    else:
      print('USAGE:')
      print('\t menu\t\t\t\tRun the menu')
      print('\t menu -h | --help\t\tBring up this menu')
      print('\t menu -s | --search-terms\tList valid search terms')
      print('\nUSING SEARCH:')
      print('\tMultiple search terms can be used, space seperated, case insensitive')
      print('\tCan search based on data in Solarwinds:')
      print('\t\t* Building ID')
      print('\t\t* Location Code')
      print('\t\t* Country')
      print('\t\t* City')
      print('\t\t* Vendor')
      print('\t\t* Model')
      print('\n\tExample search terms:')
      print('\t\t* westgate')
      print('\t\t* 2499')
      print('\t\t* pan')
      print('\t\t* uk asa')
      print('\t\t* uk nxos')
      print('\t\t* usa fw')
      print('\t\t* usa 101')
      print('\nUSER ID:')
      print('\tThe menu will use the default credential type stored in Solarwinds')
      print('\tBefore using the menu you must add your default user ID to:')
      print('\t\t/usr/local/etc/menu_settings.yaml')
      print('\n\tYou can overide the default credential type on any menu item,')
      print('\tto do this specify the ID you wish to use after the menu item.')
      print('\tFor example:')
      print('\t\t1 ipautomata')
      print('\t\t99 admin')
      print('')
    quit()
  PrintMenu([], show_quit=False)
  full_device_dict,full_device_list = loadDevices('file')
  SearchMenu()

